// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jabaddon.minitwitter.domain;

import com.jabaddon.minitwitter.domain.Tweet;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Tweet_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Tweet.entityManager;
    
    public static final List<String> Tweet.fieldNames4OrderClauseFilter = java.util.Arrays.asList("text", "timestamp", "author");
    
    public static final EntityManager Tweet.entityManager() {
        EntityManager em = new Tweet().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Tweet.countTweets() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Tweet o", Long.class).getSingleResult();
    }
    
    public static List<Tweet> Tweet.findAllTweets() {
        return entityManager().createQuery("SELECT o FROM Tweet o", Tweet.class).getResultList();
    }
    
    public static List<Tweet> Tweet.findAllTweets(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Tweet o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Tweet.class).getResultList();
    }
    
    public static Tweet Tweet.findTweet(Long id) {
        if (id == null) return null;
        return entityManager().find(Tweet.class, id);
    }
    
    public static List<Tweet> Tweet.findTweetEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Tweet o", Tweet.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Tweet> Tweet.findTweetEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Tweet o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Tweet.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Tweet.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Tweet.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Tweet attached = Tweet.findTweet(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Tweet.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Tweet.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Tweet Tweet.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Tweet merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
