// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jabaddon.minitwitter.domain;

import com.jabaddon.minitwitter.domain.MTUser;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect MTUser_Roo_Finder {
    
    public static Long MTUser.countFindMTUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = MTUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM MTUser AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static Long MTUser.countFindMTUsersByUsernameLikeOrNameLikeOrLastNameLike(String username, String name, String lastName) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = MTUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM MTUser AS o WHERE LOWER(o.username) LIKE LOWER(:username)  OR LOWER(o.name) LIKE LOWER(:name)  OR LOWER(o.lastName) LIKE LOWER(:lastName)", Long.class);
        q.setParameter("username", username);
        q.setParameter("name", name);
        q.setParameter("lastName", lastName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<MTUser> MTUser.findMTUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = MTUser.entityManager();
        TypedQuery<MTUser> q = em.createQuery("SELECT o FROM MTUser AS o WHERE o.username = :username", MTUser.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<MTUser> MTUser.findMTUsersByUsernameEquals(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = MTUser.entityManager();
        String jpaQuery = "SELECT o FROM MTUser AS o WHERE o.username = :username";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<MTUser> q = em.createQuery(jpaQuery, MTUser.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<MTUser> MTUser.findMTUsersByUsernameLikeOrNameLikeOrLastNameLike(String username, String name, String lastName, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = MTUser.entityManager();
        String jpaQuery = "SELECT o FROM MTUser AS o WHERE LOWER(o.username) LIKE LOWER(:username)  OR LOWER(o.name) LIKE LOWER(:name)  OR LOWER(o.lastName) LIKE LOWER(:lastName)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<MTUser> q = em.createQuery(jpaQuery, MTUser.class);
        q.setParameter("username", username);
        q.setParameter("name", name);
        q.setParameter("lastName", lastName);
        return q;
    }
    
}
